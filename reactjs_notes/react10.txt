Updating 
===========
Updating is the process of changing state or props of component and update
changes to nodes already in the DOM.

An update can be caused by the changes to props or state.These methods are called
in the following order when a component is being re-rendered.

i)static getDerivedStateFromProps()

ii)shouldCoponentUpdate()

iii)render()

iv)getSnapshortBeforeUpdate()

v)componentDidUpdate()


i)static getDerivedStateFromProps()
---------------------------------------
A getDerivedStateFromProps is invoked right before calling the render method,both
on the initial mount and on subsequent updates.

It should return an object to update the state or null to update nothing.

This method exists for rare use cases where the state depends on changes in props
over the time.

This method does not have access to the component istance.As it static method 
so this is not available inside this method.

syntax
------
static getDerivedStateFromProps(props,state)
{
}





ex:1
-----
Student.js
----------
import React, { Component } from 'react'

import Marks from "./Marks";

export default class Student extends Component {
        //declare the state
        constructor()
        {
            super();

            this.state={
                roll:101
            }
        }
        //arrow function
        clickHandle=()=>
        {
            console.log("Button clicked");
            this.setState({roll:102});
         }

    render() {
        return (
            <div>
                <Marks roll={this.state.roll}/>
                <button onClick={this.clickHandle}>ClickMe</button>
            </div>
        )
    }
}

Marks.js
---------
import React, { Component } from 'react'

export default class Marks extends Component {
    constructor(props)
    {
        super(props);
        this.state={
            mroll: this.props.roll
        }
    }
    render() {
        return (
            <div>
                 <h1>{this.state.mroll}</h1>
            </div>
        )
    }
}

index.js
--------
import React from 'react';
import ReactDOM from 'react-dom';
import Student from "./Student";

//render the component to index.html
ReactDOM.render(<Student />,document.getElementById("root"));


ex:2
--------
Student.js
-------------
import React, { Component } from 'react'

import Marks from "./Marks";

export default class Student extends Component {
        //declare the state
        constructor()
        {
            super();

            this.state={
                roll:101
            }
        }
        //arrow function
        clickHandle=()=>
        {
            console.log("Button clicked");
            this.setState({roll:102});
         }

    render() {
        console.log("Student - rendered");
        return (
            <div>
                <Marks roll={this.state.roll}/>
                <button onClick={this.clickHandle}>ClickMe</button>
            </div>
        )
    }
}

Marks.js
--------
import React, { Component } from 'react'

export default class Marks extends Component {
    constructor(props)
    {
        super(props);
        this.state={
            mroll: this.props.roll
        }
    }
    //this method we will use when state depends on props
    //to update the value of a state 
    static getDerivedStateFromProps(props,state)
    {
            console.log("Get derived state from props");
            if(props.roll !== state.mroll)
            {
                return {mroll: props.roll};
            }
            return null;
    }
    render() {
        console.log("Marks - rendered");
        return (
            <div>
                <h1>{this.state.mroll}</h1>
            </div>
        )
    }
}

index.js
----------
import React from 'react';
import ReactDOM from 'react-dom';
import Student from "./Student";

//render the component to index.html
ReactDOM.render(<Student />,document.getElementById("root"));


ii)shouldComponentUpdate()
--------------------------------
It is invoked when a component decides any changes/updation to the DOM.
 It allows you to control the component's behavior of updating itself. 
If this method returns true, the component will update. Otherwise, 
the component will skip the updating.


In general it used to to say when our output should be render and when it should not.


render() will not be invoked if shoudComponentUpdate() returns false.

syntax
-------
shouldComponentUpdate(nextProps,nextState)
{
}
ex:
----
Student.java
-----------
import React, { Component } from 'react'

import Marks from "./Marks";

export default class Student extends Component {
        //declare the state
        constructor()
        {
            super();

            this.state={
                roll:101
            }
        }
        //arrow function
        clickHandle=()=>
        {
            console.log("Button clicked");
            //changing roll no each time.
            this.setState({roll:this.state.roll + 1});
         }

    render() {
        console.log("Student - rendered");
        return (
            <div>
                <Marks roll={this.state.roll}/>
                <button onClick={this.clickHandle}>ClickMe</button>
            </div>
        )
    }
}

Marks.js
------------
import React, { Component } from 'react'

export default class Marks extends Component {
    constructor(props)
    {
        super(props);
        this.state={
            mroll: this.props.roll
        }
    }
    //this method we will use when state depends on props
    //to update the value of a state 
    static getDerivedStateFromProps(props,state)
    {
            console.log("Get derived state from props");
            console.log(props,state);
            if(props.roll !== state.mroll)
            {
                return {mroll: props.roll};
            }

            return null;
    }

    shouldComponentUpdate(nextProps,nextState)
    {
           if(this.state.mroll < 105)
           {
               console.log("Mark - Should component update");
               console.log(nextProps,nextState);
               return true;
           } 
           console.log(nextProps,nextState);
           return false;
    }

    render() {
        console.log("Marks - rendered");
        return (
            <div>
                <h1>{this.state.mroll}</h1>
            </div>
        )
    }
}

index.js
----------
import React from 'react';
import ReactDOM from 'react-dom';
import Student from "./Student";

//render the component to index.html
ReactDOM.render(<Student />,document.getElementById("root"));


iii)render()
------------
It is invoked to examine this.props and this.state and return one of the 
following types: React elements, Arrays and fragments, Booleans or null, String and Number. 

If shouldComponentUpdate() returns false, the code inside render() will be invoked again 
to ensure that the component displays itself properly.


iv) getSnapshotBeforeUpdate()
------------------------------
This method is called right before the virtual DOM is about to make
change to the DOM (before DOM is updated) which allows our components
to capture the current values or some information from the DOM before 
it is potentially changed. Any value returned by this lifecycle will
be passed as third parameter to componentDidUpdate().
syntax
-------
getSnapshortBeforeUpdate(prevProps,prevState)
{
}


v)componentDidUpdate()
---------------------
It is invoked immediately after the component updating occurs. 

In this method, you can put any code inside this which you want to execute once the updating occurs. 
This method is not invoked for the initial render.
syntax
------
componentDidUpdate(prevProps,prevState,snapshot)
{}
ex:
------
Student.js
----------
import React, { Component } from 'react'

import Marks from "./Marks";

export default class Student extends Component {
        //declare the state
        constructor()
        {
            super();

            this.state={
                roll:101
            }
        }
        //arrow function
        clickHandle=()=>
        {
            console.log("Button clicked");
            //changing roll no each time.
            this.setState({roll:this.state.roll + 1});
         }

    render() {
        console.log("Student - rendered");
        return (
            <div>
                <Marks roll={this.state.roll}/>
                <button onClick={this.clickHandle}>ClickMe</button>
            </div>
        )
    }
}

Marks.js
----------
import React, { Component } from 'react'

export default class Marks extends Component {
    constructor(props)
    {
        super(props);
        this.state={
            mroll: this.props.roll
        }
    }
    //this method we will use when state depends on props
    //to update the value of a state 
    static getDerivedStateFromProps(props,state)
    {
            console.log("Get derived state from props");
            console.log(props,state);
            if(props.roll !== state.mroll)
            {
                return {mroll: props.roll};
            }

            return null;
    }

    shouldComponentUpdate(nextProps,nextState)
    {
           if(this.state.mroll < 105)
           {
               console.log("Mark - Should component update");
               console.log(nextProps,nextState);
               return true;
           } 
           console.log(nextProps,nextState);
           return false;
    }
    //this method runs before update
    getSnapshotBeforeUpdate(prevProps,prevState)
    {
        console.log("Marks - get snap shot before update ");
        console.log(prevProps,prevState);
        return 45;
    }
    //this method runs after update
    componentDidUpdate(prevProps,prevState,snapshot)
    {
        console.log("Marks - component did update ");
        console.log(prevProps,prevState,snapshot);
    }
    render() {
        console.log("Marks - rendered");
        return (
            <div>
                <h1>{this.state.mroll}</h1>
            </div>
        )
    }
}

index.js
--------
import React from 'react';
import ReactDOM from 'react-dom';
import Student from "./Student";

//render the component to index.html
ReactDOM.render(<Student />,document.getElementById("root"));

Unmounting
===========
Unmounting is the process of removing components from the DOM.

This method is called when a component is being removed from the DOM.

i)componentWillUnmount()

i)componentWillUnmount()
-------------------------
This method is invoked immediately before a component is destroyed and 
unmounted permanently.

 It performs any necessary cleanup related task such as invalidating 
timers, event listener, canceling network requests, or cleaning up DOM 
elements. If a component instance is unmounted, you cannot mount it again.

ex:

Student.js
----------
import React, { Component } from 'react'

export default class Student extends Component {
    componentDidMount()
    {
        console.log("Student Mounted");
    }
    render() {
	console.log("Student render");
        return (
            <div>
                <h1>Hello Student component</h1>
            </div>
        )
    }
}

App.js
--------
import React, { Component } from 'react'

export default class App extends Component {
    //this method will execute when component is mounted
    componentDidMount()
    {
        console.log("App Mounted");
    }
    //this method we will use to do something before component is remove
    componentWillUnmount()
    {
        console.log("App unmounted")
    }
    render() {
	console.log("App render");
        return (
            <div>
                <h1>Hello App component</h1>                
            </div>
        )
    }
}

index.js
---------
import React from 'react';
import ReactDOM from 'react-dom';
import Student from "./Student";
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));
ReactDOM.render(<Student />,document.getElementById("stu"));
//unmount the App from root
ReactDOM.unmountComponentAtNode(document.getElementById("root"));


index.html
--------
-
-
-
<div id="root"></div>
<div id="stu"></div>
-
-
-


Hooks
==========
Hooks are function that let you "hook into" React state and lifecycle
features from function components.

Hooks allow you to use React without classes.It means you can use state 
and other React features without writing a class.

React provides a few built-In hooks like useState,useEffect and etc.

Hooks are a new addition in React 16.8.

When use Hooks
---------------
If you write a function component and realize you need to add some state 
to it.

Rules of Hooks
-------------------
1)
Only calls Hooks at the top level-We should not call Hooks inside loops,
conditions or nested functions. Instead always use Hooks at the top level
of your React function.

2)
Only call Hooks from React functions-we should not call Hooks from regular
javascript functions.Instead ,call Hooks from React function components
or call Hooks from custom Hooks.

3)
React relies on the order in which Hooks are called.

4)
Hooks don't work inside classes.

Declaring State
================
useState() is a Hook that allows us to add React state to function components.

We call it inside a function component to add some local state to it.

useState returns a pair - the current state value and a function that
let us update it.

React will preserve this state between re-renders.

We can call this function from an event handler or somewhere else.

ex:
import React ,{useState} form "react";
useState("Alan");
or
const nameStateVariable=useState("Alan");
or
const [name,setName]=useState("Alan"); // it is destructure the array.

const [amount,setAmount] = useState('90000');  // amount = 90000 ,  setAmount(){  amount = 55000}

When we declare a state variable with useState, it returns a pair-
an array with two items.So by writing square bracket we are doing 
array Destructuring.

ex:
we can use below code as follow.

const nameStateVariable = useState("Alan");

const name=nameStateVariable[0];  //first item of array
const setName=nameStateVariable[1]; // second item of array

>The first item is the current value.

>The second is a function that lets us update it.

Note:
-----
	Instead of doing  above code ,better to perform Destructuring.

ex:
function App()
{
const nameStateVariable = useState("Alan");
const [name,setName] = useState("Rahul");
const [roll,setRoll] = useState(101);
const [subject,setSubject] = useState([{sub:"Math"}]);

}

Accessing state
==================
In a function ,we can use state variable directly.
ex:
	<h1>Your Name is {name}</h1>

Updating state
-------------
ex:
setName("GlobalEdx");

ex1
----
App.js
--------
import React,{useState} from 'react';
function App()
{
    //declaring array variable
    const nameStateVariable=useState("Alan");
    return <React.Fragment>
                <h1>{nameStateVariable[0]}</h1>
            </React.Fragment>
}
export default App;

index.js
----------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));


 to change the state.






To change the state we can use below example.

App.js
-------
import React,{useState} from 'react';
function App()
{
    //declaring array variable
    const nameStateVariable=useState("Alan");

   const handleClick=()=>
    {
        nameStateVariable[1]("GlobalEdx");
    }
    return <React.Fragment>
                <h1>{nameStateVariable[0]}</h1>
                <button onClick={handleClick}>clickme</button>
            </React.Fragment>
}
export default App;

index.js
---------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));


ex:2
----
App.js
------
import React,{useState} from 'react';
function App()
{
    //declaring array variable
    const nameStateVariable=useState("Alan");
    const name=nameStateVariable[0];
    const setName=nameStateVariable[1];

   const handleClick=()=>
    {
       setName("GlobalEdx");
    }
    return <React.Fragment>
                <h1>{name}</h1>
                <button onClick={handleClick}>clickme</button>
            </React.Fragment>
}
export default App;

ex:3 (destructure)
--------------------
App.js
------
import React,{useState} from 'react';
function App()
{
    //declaring array variable
    const [name,setName]=useState("Alan");
    //const name=nameStateVariable[0];
    //const setName=nameStateVariable[1];

   const handleClick=()=>
    {
       setName("GlobalEdx");
    }
    return <React.Fragment>
                <h1>{name}</h1>
                <button onClick={handleClick}>clickme</button>
            </React.Fragment>
}
export default App;


Effect Hooks
============
The Effect Hook let us to perform side effects in function components.

Data fetching , setting up a subscription, and manually changing the 
DOM in React components are all examples of side effects.


useEffect()
===========
A useEffect is a hook for encapsulating code that has "side effects".
if we are familiar with React class life cycle methods.We can thing of 
useEffect Hooks as componentDidMount,compnoentDidUpdate and 
componentWillUnmount combined.

useEffect =componentDidMount+ compnoentDidUpdate +componentWillUnmount
ex:
import React,{useEffect} from "react";
useEffect(Function)
or
useEffect(Function ,Array)

The function passes to useEffect will run after the render is committed
to the screen.

Second argument to useEffect that is the array of values that the 
effect depends on.(It is for condition purpose).

Note:
------
We can call useEffect as many times we required.

ex:
useEffect(()=>
{
	console.log("Hello useeffect");
});

ex:
useEffect(()=>
{	
	console.log("Hello useEffect");
},[count]);


What does useEffect do?
--------------------------

By using this Hook,we can tell react that your component needs to do 
something after render.

React remember the function we passed and call it later after performing 
the DOM updates.

In this effect, we set the document title,we could also perform data 
fetching or call some other imperative API.

Note:
--------
useEffect runs after the first render and after every update.

ex:1
=======
App.js
-------
import React,{useState} from 'react';
function App()
{
    const [count,setCount]=useState(0);

     //handler event
     const handleClick=()=>
     {
         setCount(count +1);
     }   
    return <React.Fragment>
                <h1>Count Up: {count}</h1>
                <button onClick={handleClick}>Increment</button>
            </React.Fragment>
}
export default App;

index.js
---------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));

Add the useEffect to above program.

ex:

App.js
-------
import React,{useState,useEffect} from 'react';
function App()
{
    const [count,setCount]=useState(0);

     //handler event
     const handleClick=()=>
     {
         setCount(count +1);
     }
     //it will execute when component is mount
     //it will execute when component is updated
     useEffect(() => {
         console.log("useeffect ")
     })   
    return <React.Fragment>
                <h1>Count Up: {count}</h1>
                <button onClick={handleClick}>Increment</button>
            </React.Fragment>
}
export default App;

useEffect with condition
==========-============
App.js
--------
import React,{useState,useEffect} from 'react';
function App()
{
    const [count,setCount]=useState(0);
    const [count1,setCount1]=useState(50);
     //handler event
     //increment 
     const handleIncrement=()=>
     {
         setCount(count +1);
     }
     //handler event
     //decrement
     const handleDecrement=()=>
     {
         setCount1(count1 - 1);
     }
     //it will execute when component is mount
     //it will execute when component is updated
     useEffect(() => {
         console.log("useeffect ")
     })   
    return <React.Fragment>
                <h1>Count Up: {count}</h1>
                <button onClick={handleIncrement}>Increment</button>

                <h1>Count Up: {count1}</h1>
                <button onClick={handleDecrement}>Decrement</button>
            </React.Fragment>
}
export default App;

We want to add useEffect() only to one function then we write below code.
ex:
App.js
-------
import React,{useState,useEffect} from 'react';
function App()
{
    const [count,setCount]=useState(0);
    const [count1,setCount1]=useState(50);
     //handler event
     //increment 
     const handleIncrement=()=>
     {
         setCount(count +1);
     }
     //handler event
     //decrement
     const handleDecrement=()=>
     {
         setCount1(count1 - 1);
     }
     //it will execute when component is mount
     //it will execute when component is updated
     //this method executes only for count/increment
     useEffect(() => {
         console.log("useeffect ")
     },[count])   
    return <React.Fragment>
                <h1>Count Up: {count}</h1>
                <button onClick={handleIncrement}>Increment</button>

                <h1>Count Up: {count1}</h1>
                <button onClick={handleDecrement}>Decrement</button>
            </React.Fragment>
}
export default App;


Custom Hooks
==============
Hooks which are created by the programmer are called custom Hooks.

ex:
Custom.js
------------
import {useState} from "react";
//creating custom hook
function useCustomCounter()
{
    const [count,setCount]=useState(0);
    const handleIncrement=()=>
    {
        setCount(count + 1);
    }
    return {
        count,
        handleIncrement
    }
}
export default useCustomCounter;

App.js
-----------
import React from 'react';
import useCustomCounter from "./Custom";

function App()
{
    //storing custom hook in a variable
    const data=useCustomCounter();

     
    return <React.Fragment>
                <h1>Count Up: {data.count}</h1>
                <button onClick={data.handleIncrement}>Increment</button>

                
            </React.Fragment>
}
export default App;

index.js
----------
import React from 'react';
import ReactDOM from 'react-dom';
import App from "./App";

//render the component to index.html
ReactDOM.render(<App />,document.getElementById("root"));

we can use custom component for individual functionality.
ex:
App.js
--------
import React from 'react';
import useCustomCounter from "./Customer";

function App()
{
    //storing custom hook in a variable
    const data=useCustomCounter();
    const data1=useCustomCounter();

     
    return <React.Fragment>
                <h1>Count Up: {data.count}</h1>
                <button onClick={data.handleIncrement}>Increment</button>
              
                <h1>Count Up: {data1.count}</h1>
                <button onClick={data1.handleIncrement}>Increment</button>

                
            </React.Fragment>
}
export default App;











































































